// Generated by CoffeeScript 1.6.3
(function() {
  this.playSound = function(context, buffer, time, decay) {
    var gIncrement, i, instances, lastTime, numInstances, tIncrement, thisTime, _i, _j, _ref, _results;
    if (decay > 0) {
      numInstances = Math.ceil(decay / 10) + 1;
    } else {
      numInstances = 1;
    }
    gIncrement = 1 / numInstances;
    tIncrement = time / 100;
    instances = [];
    lastTime = 0;
    for (i = _i = 0; 0 <= numInstances ? _i < numInstances : _i > numInstances; i = 0 <= numInstances ? ++_i : --_i) {
      thisTime = i * tIncrement;
      if (lastTime < 1) {
        instances.push({
          time: thisTime,
          gain: 1 - (gIncrement * i)
        });
      }
      lastTime = thisTime;
    }
    _results = [];
    for (i = _j = 0, _ref = instances.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      instances[i].sample = context.createBufferSource();
      instances[i].sample.buffer = buffer;
      instances[i].gainNode = context.createGain();
      instances[i].gainNode.gain.value = 1;
      instances[i].delayNode = context.createDelay();
      instances[i].delayNode.delayTime.value = instances[i].time;
      instances[i].delayGainNode = context.createGain();
      instances[i].delayGainNode.gain.value = instances[i].gain;
      instances[i].sample.connect(instances[i].gainNode);
      instances[i].gainNode.connect(instances[i].delayNode);
      instances[i].delayNode.connect(instances[i].delayGainNode);
      instances[i].delayGainNode.connect(context.destination);
      _results.push(instances[i].sample.start(0));
    }
    return _results;
  };

  this.BufferLoader = (function() {
    function BufferLoader(context, urlListObj, callback) {
      this.context = context;
      this.urlListObj = urlListObj;
      this.onload = callback;
      this.bufferList = [];
      this.loadCount = 0;
    }

    BufferLoader.prototype.load = function() {
      var k, v, _ref, _results;
      _ref = this.urlListObj;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this.loadBuffer(v, k));
      }
      return _results;
    };

    BufferLoader.prototype.loadBuffer = function(url, index) {
      var loader, request;
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.responseType = "arraybuffer";
      loader = this;
      request.onload = function() {
        return loader.context.decodeAudioData(request.response, function(buffer) {
          if (!buffer) {
            alert("error decoding file data: " + url);
            return;
          }
          loader.bufferList[index] = buffer;
          if (++loader.loadCount === _.size(loader.urlListObj)) {
            return loader.onload(loader.bufferList);
          }
        }, function(error) {
          return console.error("decodeAudioData error", error);
        });
      };
      request.onerror = function() {
        return alert("BufferLoader: XHR error");
      };
      return request.send();
    };

    return BufferLoader;

  })();

}).call(this);
